{"version":3,"file":"index.f6dfd6c9.js","sources":["../../../src/script.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n// import GUI from \"lil-gui\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\n\n/**\n * Base\n */\n// Debug\n// const gui = new GUI();\n\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Scene\nconst scene = new THREE.Scene();\nscene.background = new THREE.Color(0x99aa88);\n\nconst dracoLoader = new DRACOLoader();\ndracoLoader.setDecoderPath(\"/draco/\");\nconst gltfLoader = new GLTFLoader();\ngltfLoader.setDRACOLoader(dracoLoader);\n\nlet mixer = null;\n\ngltfLoader.load(\"/models/foresthouse.glb\", (gltf) => {\n  // use spread function to copy array\n\n  const children = [...gltf.scene.children];\n  for (const child of children) {\n    // child.scale.setScalar(0.06, 0.06, 0.06);\n    fitModelToView(child);\n    if (child.material) {\n      child.material.depthWrite = true;\n    }\n    scene.add(child);\n  }\n});\n\ngltfLoader.load(\"models/Fox.glb\", (gltf) => {\n  // use spread function to copy array\n  // const children = [...gltf.scene.children];\n  // for (const child of children) {\n  //   scene.add(child);\n  // }\n  mixer = new THREE.AnimationMixer(gltf.scene);\n  const action = mixer.clipAction(gltf.animations[1]);\n  action.play();\n  // gltf.scene.scale.set(0.02, 0.02, 0.02);\n  fitModelToView(gltf.scene);\n  gltf.scene.position.set(3, 0, -3);\n  scene.add(gltf.scene);\n});\n\nfunction fitModelToView(model) {\n  // 计算模型的边界盒子\n  //缩放尺寸\n  const box = new THREE.Box3().setFromObject(model);\n  const x = box.max.x - box.min.x;\n  const y = box.max.y - box.min.y;\n  const z = box.max.z - box.min.z;\n  const maxDim = Math.max(x, y, z);\n\n  const scale = 2 / maxDim;\n  model.scale.set(scale, scale, scale);\n  // model.position.set(0, 0, 0);\n\n  // 计算边界盒子的大小\n  var size = box.getSize(new THREE.Vector3()).length();\n  // 设置相机的近和远剪面以适应模型大小\n  camera.near = size / 1000;\n  camera.far = size * 1000;\n  // 更新相机状态\n  camera.updateProjectionMatrix();\n}\n/**\n * Floor\n */\n// const floor = new THREE.Mesh(\n//   new THREE.PlaneGeometry(50, 50),\n//   new THREE.MeshStandardMaterial({\n//     color: \"#888888\",\n//     metalness: 0,\n//     roughness: 0.5,\n//   })\n// );\n// floor.receiveShadow = true;\n// floor.rotation.x = -Math.PI * 0.5;\n// scene.add(floor);\n\n/**\n * Lights\n */\nconst ambientLight = new THREE.AmbientLight(0xffffff, 5);\nscene.add(ambientLight);\n\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 3);\ndirectionalLight.castShadow = true;\ndirectionalLight.shadow.mapSize.set(1024, 1024);\ndirectionalLight.shadow.camera.far = 15;\ndirectionalLight.shadow.camera.left = -7;\ndirectionalLight.shadow.camera.top = 7;\ndirectionalLight.shadow.camera.right = 7;\ndirectionalLight.shadow.camera.bottom = -7;\ndirectionalLight.position.set(5, 5, 5);\nscene.add(directionalLight);\n\n/**\n * Sizes\n */\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nwindow.addEventListener(\"resize\", () => {\n  // Update sizes\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n\n  // Update camera\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n\n  // Update renderer\n  renderer.setSize(sizes.width, sizes.height);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.1,\n  1000\n);\ncamera.position.set(5, 5, 5);\nscene.add(camera);\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.target.set(0, 0.75, 0);\ncontrols.enableDamping = true;\ncontrols.autoRotate = true;\ncontrols.autoRotateSpeed = 1;\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nlet previousTime = 0;\n\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n  const deltaTime = elapsedTime - previousTime;\n  previousTime = elapsedTime;\n\n  //update mixer\n  if (mixer != null) {\n    mixer.update(deltaTime);\n  }\n\n  // Update controls\n  controls.update();\n\n  // Render\n  renderer.render(scene, camera);\n\n  // Call tick again on the next frame\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n"],"names":["canvas","scene","THREE.Scene","THREE.Color","dracoLoader","DRACOLoader","gltfLoader","GLTFLoader","mixer","gltf","children","child","fitModelToView","THREE.AnimationMixer","model","box","THREE.Box3","x","y","z","scale","size","THREE.Vector3","camera","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","sizes","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","clock","THREE.Clock","previousTime","tick","elapsedTime","deltaTime"],"mappings":"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"}